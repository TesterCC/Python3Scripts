这段代码实现了使用Python3实现UDP协议文件传输的发送端和接收端，保证了数据传输的可靠性，有文件缓存，允许重传。

其中，发送端的主要步骤如下：

创建一个UDP socket对象，并设置超时时间为1秒。
将UDP socket对象连接到接收端的IP地址和端口号。
定义缓冲区大小和文件大小，并以读形式打开文件。
发送文件名、文件大小和文件校验和数据包。
等待接收反馈，表示对方已经准备好接收文件。
循环读取文件内容，发送数据包，并接收对方反馈。如果对方没收到数据包，则重发该数据包。
发送结束信号，并关闭UDP socket。
而接收端的主要步骤如下：

创建一个UDP socket对象，并绑定到本机IP地址和端口号，并设置超时时间为5秒。
创建文件存储目录，接收到发送方发送的文件信息（包括文件名、文件大小和校验和）。
打开文件，并发送确认信息表示已准备好接收文件。
循环接收数据包，并写入文件，同时发送确认信息。如果接收方收到损坏的数据包，则发送重发请求，直到数据包接收完毕。
检查文件的校验和是否与发送方发送的文件校验和匹配。
打印文件发送状态，并关闭UDP socket。
要注意的是，这只是一个基本的实现，还需要处理一些实际情况，例如如果已经传输了一部分文件数据，但由于网络异常或其它原因导致传输中断，则需要在接收方处进行相应的逻辑处理，以防止传输过程中数据的丢失或损坏等情况的发生。此处代码中我们通过定义超时时间并实现了重试来处理部分上述情况，但是在实际应用中可能还需要更多的细节处理。